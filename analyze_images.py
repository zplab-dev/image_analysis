import freeimage
import pathlib
import scipy.ndimage as ndimage
import matplotlib.pyplot as plt
import numpy as np
from skimage import transform
from zplib.image import mask

def calculate_iou(prediction, ground_truth, plot_val=False, save_val=False, save_dir=None, pyr=False):
    """Find intersection over union for 2 images
    Prediction and ground_truth are boolean arrays
    """
    pred_orig = freeimage.read(prediction)
    gt_orig = freeimage.read(ground_truth)

    folder, worm_id = ground_truth.parts[-2:]
    worm_id = worm_id.split(' ')[0]

    #get rid of stuff touching the edges
    if pyr:
        pred = mask.remove_edge_objects(pred_orig)
        gt = mask.remove_edge_objects(gt_orig)

        #find the worm in the mask (largest object presumably)
        pred_image = mask.get_largest_object(pred)
        ground_truth = mask.get_largest_object(gt
            )
    else:
        #find the worm in the mask (largest object presumably)
        pred_image = mask.get_largest_object(pred_orig)
        ground_truth = mask.get_largest_object(gt_orig)
    

    #find intersect and union
    intersect = (pred_image & ground_truth)
    union = (pred_image|ground_truth)

    #plot for validation
    if save_val:
        #maybe change this to not be this
        save_file = save_dir+"/"+folder+"_"+worm_id+"_val.png"
        #if willie:
        #    save_file = '/home/nicolette/Documents/lab_stuff/worm_segmentation_validation/Willie_iou/'+folder+"_"+worm_id+"_val.png"
        #else:
        #    save_file = '/home/nicolette/Documents/lab_stuff/MATLAB_scripts/binarySeg_v2/figFolder/background_sub_pyr/iou/'+prediction.stem+"_val.png"
        print("saving: "+save_file)
        plot_validation(pred_orig, gt_orig, intersect, union, save_val=True, save_file=save_file)
    if plot_val:
        plot_validation(pred_orig, gt_orig, intersect, union)

    return intersect.sum()/union.sum()

def plot_validation(prediction, ground_truth, intersect, union, save_val=False, save_file=None):
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4)
    ax1.imshow(prediction)
    ax1.set_title("Prediction")

    ax2.imshow(ground_truth)
    ax2.set_title("Ground truth")

    ax3.imshow(intersect)
    ax3.set_title("Intersect")

    ax4.imshow(union)
    ax4.set_title("Union")

    iou = intersect.sum()/union.sum()
    fig.suptitle("iou: " + str(iou))
    plt.subplots_adjust(top=0.85)

    if save_val:
        plt.savefig(save_file, dpi=200)
    else:
        plt.show()
    
    plt.close("all")

def get_corresponding_mask(pred_dir, pred_file, ground_truth_dir):
    pred_dir = pathlib.Path(pred_dir)
    gt_dir = pathlib.Path(ground_truth_dir)
    p = list(pred_dir.glob('*'+pred_file+'*'))[0]
    folder, worm_id = p.stem.split(' prediction_mask')
    worm_id = worm_id.strip()
    #print(folder+"/"+worm_id+"*")
    gt_file = list(gt_dir.glob(folder+"/"+worm_id+"*"))[0]

    return (p, gt_file)


def iou(prediction_dir, ground_truth_dir, save_dir, pyr=False):
    """iterate through a directory of prediction and ground_truth images
    calculates individual and average iou
    Returns average
    """
    pred_dir = pathlib.Path(prediction_dir)
    gt_dir = pathlib.Path(ground_truth_dir)

    iou_dict={}
    #currently way of getting prediction and ground_truth arrays:
    #need to get the gt folder from the prediction name
    #loop through prediction_dir to get the names from the ground_truth_dir
    for p in pred_dir.glob('*.png'):
        #pred_image = freeimage.read(p)

        folder, worm_id = p.stem.split(' prediction_mask')
        worm_id = worm_id.strip()
        #alter worm_id to be in a better position
        #grab file from gt_dir
        #print(folder+"/"+worm_id+"*")
        gt_file = list(gt_dir.glob(folder+"/"+worm_id+"*"))[0]
        #print(str(gt_file))
        #gt_image = freeimage.read(gt_file)
        #print(p.name)

        #calculate the iou
        iou_dict[p.stem] = calculate_iou(p, gt_file, save_val=False, save_dir=save_dir, pyr=pyr)

    for p in list(pred_dir.glob('*.png'))[::5]:
        folder, worm_id = p.stem.split(' prediction_mask')
        worm_id = worm_id.strip()
        #alter worm_id to be in a better position
        #grab file from gt_dir
        #print(folder+"/"+worm_id+"*")
        gt_file = list(gt_dir.glob(folder+"/"+worm_id+"*"))[0]
        #print(str(gt_file))
        #gt_image = freeimage.read(gt_file)
        #print(p.name)

        #calculate the iou
        calculate_iou(p, gt_file, save_val=True, save_dir=save_dir, pyr=pyr)

    print(np.mean(list(iou_dict.values())))
    
    return iou_dict


def iou_willie(prediction_dir, ground_truth_dir, save_dir=None):
    """Calculate iou for masks generated by willie's code
    (Different way of getting the corresponding mask)
    TODO: make the iou generalizable for all versions
    """

    pred_dir = pathlib.Path(prediction_dir)
    print("Prediction path: " +str(pred_dir))
    gt_dir = pathlib.Path(ground_truth_dir)
    print("Ground Truth path: " + str(gt_dir))

    iou_dict={}

    for g in gt_dir.glob('**/*mask*'):
        folder, worm_id = g.parts[-2:]
        worm_id = worm_id.split(' ')[0]
        #print(g)

        print(folder+'/'+worm_id+'*mask*')
        pred_file = list(pred_dir.glob(folder+'/'+worm_id+'*mask*.png'))[0]
        #print(calculate_iou(g, pred_file, plot_val=True))
        key = str(folder+"_"+worm_id)
        iou_dict[key] = calculate_iou(pred_file, g, save_val=False)

    if save_dir:
        for g in list(gt_dir.glob('**/*mask*'))[::5]:
        folder, worm_id = g.parts[-2:]
        worm_id = worm_id.split(' ')[0]
        #print(g)

        print(folder+'/'+worm_id+'*mask*')
        pred_file = list(pred_dir.glob(folder+'/'+worm_id+'*mask*.png'))[0]
        #print(calculate_iou(g, pred_file, plot_val=True))
        calculate_iou(pred_file, g, save_val=True, save_dir=save_dir)

    print(np.mean(list(iou_dict.values())))

        
    return iou_dict

def comparison(iou_dict, mmask_dir, hmask_dir, mmask_save_dir):
    """grab all pictures from willie's dir to compare them with
    """

    mmask_dir = pathlib.Path(mmask_dir)
    hmask_dir = pathlib.Path(hmask_dir)

    mmask_iou = {}
    
    for k in iou_dict.keys():
        folder, worm_id = k.split(' prediction_mask')
        worm_id = worm_id.strip().split(' ')[0]

        #grab the machine generated mask and the human (ground truth) mask
        #print(folder+"/"+worm_id+"*mask*")
        mmask = list(mmask_dir.glob(folder+"/"+worm_id+"*mask*"))[0]
        hmask = list(hmask_dir.glob(folder+"/"+worm_id+"*mask*"))[0]
        mmask_iou[k] = calculate_iou(mmask, hmask, save_val=True, save_dir=mmask_save_dir)
    
    print(np.mean(list(mmask_iou.values())))
    return mmask_iou

